// Generated by CoffeeScript 1.7.1
(function() {
  var TEXT, TRM, TYPES, alert, badge, debug, echo, eventually, help, info, is_toplevel, log, njs_cp, njs_readline, pattern, route, rpr, test, warn, whisper;

  njs_cp = require('child_process');

  njs_readline = require('readline');

  TEXT = require('coffeenode-text');

  TYPES = require('coffeenode-types');

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = 'XLTX';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  echo = TRM.echo.bind(TRM);

  eventually = process.nextTick;


  /* Test whether `agrep` is installed: */

  test = njs_cp.spawn('agrep', ['--version']);

  test.stderr.setEncoding('utf-8');

  test.stdout.setEncoding('utf-8');

  test.on('error', function(error) {
    console.log('error', rpr(error));
    if (error['code'] === 'ENOENT') {
      log();
      alert("it looks like `agrep` is not installed");
      help("please visit https://github.com/Wikinaut/agrep to fix this");
    }
    throw error;
  });

  this._search = function(route, pattern, handler) {
    var Z, child_process, command, error_collector, line_reader, options, parameters;
    Z = null;
    pattern = pattern.replace(/"/g, '\\"');
    command = 'agrep';
    parameters = ['--line-number', '--show-position', pattern, route];
    log(TRM.pink(command.concat(' ', parameters.join(' '))));
    options = {};
    child_process = njs_cp.spawn(command, parameters, options);
    error_collector = [];
    child_process.stderr.setEncoding('utf-8');
    child_process.stdout.setEncoding('utf-8');
    line_reader = njs_readline.createInterface(child_process.stdout, child_process.stdin);
    child_process.stderr.on('data', (function(_this) {
      return function(data) {
        return error_collector.push(data);
      };
    })(this));
    line_reader.on('line', function(line) {
      return handler(null, line);
    });
    child_process.stdout.on('end', (function(_this) {
      return function() {

        /* Filter errors for non-empty lines that do not show the standard 'skipping rest of file'
        notification:
         */
        var errors;
        errors = TEXT.lines_of(error_collector.join(''));
        errors = errors.filter(function(line) {
          return line.length > 0 && ((line.match(/^ERR: Too many matches in /)) == null);
        });
        if (errors.length !== 0) {
          return new Error(handler(errors.join('\n')));
        }
        return handler(null, null);
      };
    })(this));
    return null;
  };

  this.search = function(route, pattern, handler) {
    var result_count, result_matcher;
    if ((pattern == null) || pattern.length === 0) {
      return handler(null, null);
    }
    if (!TYPES.isa_text(pattern)) {
      return handler(new Error("expected a text for pattern, got a " + (TYPES.type_of(pattern))));
    }
    result_count = 0;
    result_matcher = /^([0-9]+):([0-9]+)-([0-9]+):(.+)$/;
    this._search(route, pattern, (function(_this) {
      return function(error, line) {
        var find, ignored, line_nr, line_nr_txt, match, start_chr_idx, start_chr_nr_txt, stop_chr_idx, stop_chr_nr_txt;
        if (error != null) {
          throw error;
        }
        if (line === null) {
          return handler(null, null);
        }
        match = line.match(result_matcher);
        if (match != null) {
          ignored = match[0], line_nr_txt = match[1], start_chr_nr_txt = match[2], stop_chr_nr_txt = match[3], find = match[4];
        } else {
          line_nr_txt = '0';
          start_chr_nr_txt = '0';
          stop_chr_nr_txt = '0';
          find = '';
        }
        line_nr = parseInt(line_nr_txt, 10);
        start_chr_idx = parseInt(start_chr_nr_txt, 10);
        stop_chr_idx = parseInt(stop_chr_nr_txt, 10);
        result_count += 1;

        /* TAINT `agrep` would appear to have issues with UTF-8 and miscount bytes with some inputs. We handle
        this situation by foregoing match hiliting for the time being.
         */
        return handler(null, [route, line_nr, [find]]);
      };
    })(this));
    return null;
  };


  /* show demo */

  if (is_toplevel = process.argv[1] === __filename) {
    route = '/Users/flow/JIZURA/flow/datasources/shape/shape-breakdown-formula.txt';
    route = '/Users/flow/JIZURA/flow/datasources/shape/shape-strokeorder-zhaziwubifa.txt';
    pattern = 'jzr-fig';
    this.search(route, pattern, function(error, result) {
      var finds, line_nr;
      if (error != null) {
        throw error;
      }
      if (result === null) {
        log(TRM.green('OK'));
        return null;
      }
      route = result[0], line_nr = result[1], finds = result[2];
      return log(TRM.grey(route), TRM.yellow(line_nr), TRM.lime(finds));
    });
  }

}).call(this);
