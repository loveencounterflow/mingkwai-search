// Generated by CoffeeScript 1.10.0
(function() {
  var CHR, DATASOURCES, DSREGISTRY, LANGUAGE, MOMENT, TRM, TYPES, echo, ids_translations, log, name_, rpr, teacup;

  TRM = require('coffeenode-trm');

  TYPES = require('coffeenode-types');

  rpr = TRM.rpr.bind(TRM);

  log = TRM.log.bind(TRM);

  echo = TRM.echo.bind(TRM);

  CHR = require('coffeenode-chr');

  LANGUAGE = require('./LANGUAGE');

  DATASOURCES = require('jizura-datasources');

  DSREGISTRY = DATASOURCES.REGISTRY;

  ids_translations = require('./ids-translations');


  /* http://momentjs.com */

  MOMENT = require('moment');


  /* https://github.com/goodeggs/teacup */

  teacup = require('teacup');

  for (name_ in teacup) {
    eval((name_.toUpperCase()) + " = teacup[ " + (rpr(name_)) + " ]");
  }

  this._markup_text = function(text) {
    var R, cell, cells, chr, chrs, chunk, chunks, cid, collector, csg, i, idc, j, k, l, len, len1, len2, len3, len4, m, markup_options, ref, rsg;
    R = [];
    markup_options = {
      input: 'xncr',
      output: 'html'
    };
    cells = text.split(/\t/g);
    for (i = 0, len = cells.length; i < len; i++) {
      cell = cells[i];
      collector = [];
      chunks = CHR.chunks_from_text(cell, markup_options);
      for (j = 0, len1 = chunks.length; j < len1; j++) {
        chunk = chunks[j];
        csg = chunk['csg'];
        rsg = chunk['rsg'];

        /* If character set is Unicode or Jizura, display characters with proper font selection markup: */
        switch (csg) {
          case 'u':
            switch (rsg) {
              case 'u-cjk-idc':
              case 'u-geoms':
              case 'u-arrow':
              case null:
                ref = chunk['text'];
                for (k = 0, len2 = ref.length; k < len2; k++) {
                  chr = ref[k];
                  idc = ids_translations[chr];

                  /* TAINT we'll probably use jizura font with standard IDCs in standard positions */
                  if (false) {
                    collector.push("<span class='jzr jzr-idc'>".concat(idc, '</span>'));
                  } else {
                    collector.push("<span class='u u-cjk-idc'>".concat(chr, '</span>'));
                  }
                }
                break;
              default:
                collector.push('<span class="'.concat(csg, ' ', rsg, '">', chunk['text'], '</span>'));
            }
            break;
          case 'jzr':
            chrs = CHR.chrs_from_text(chunk['text'], markup_options);
            for (l = 0, len3 = chrs.length; l < len3; l++) {
              chr = chrs[l];
              cid = CHR.cid_from_chr(chr, markup_options);
              collector.push('<span class="'.concat(csg, ' ', rsg, '">', chr, '</span>'));
              collector.push("<span class='zero'>&jzr#x" + (cid.toString(16)) + ";</span>");
            }
            break;
          default:

            /* Otherwise, display characters as FNCRs with `chr-ref` class: */
            chrs = CHR.chrs_from_text(chunk['text'], markup_options);
            for (m = 0, len4 = chrs.length; m < len4; m++) {
              chr = chrs[m];
              cid = CHR.cid_from_chr(chr, markup_options);
              collector.push("<span class='chr-ref'><!--\n  --><span class='csg'><span class='zero'>&amp;</span>" + csg + "</span><!--\n  --><span class='cid'><span class='zero'>#x</span>" + (cid.toString(16)) + "<!--\n  --><span class='zero'>;</span></span></span>");
            }
        }
      }
      R.push(collector.join(''));
    }
    return R.join('\t');
  };

  this.get_languagecode_etc = function(O) {
    var _, language_class, languagecode, ref, tainted_languagecode, translate;
    tainted_languagecode = O['languagecode'];
    ref = LANGUAGE.get_languagecode_and_translator_with_fallback(tainted_languagecode), languagecode = ref[0], translate = ref[1];
    if (tainted_languagecode !== languagecode) {
      log(TRM.red('©29f', O['rqid'], "language has been corrected from " + (rpr(tainted_languagecode)) + " to " + (rpr(languagecode))));
    } else {
      log(TRM.green('©29f', O['rqid'], "language has been set to " + (rpr(languagecode))));
    }
    language_class = "." + languagecode;
    _ = RENDERABLE((function(_this) {
      return function(text) {
        SPAN(language_class, translate(text));
        return null;
      };
    })(this));
    return [languagecode, language_class, translate, _];
  };

  this.main = RENDERABLE(function(O) {
    var _, language_class, languagecode, page_style, q, query_input_options, ref, translate;
    ref = this.get_languagecode_etc(O), languagecode = ref[0], language_class = ref[1], translate = ref[2], _ = ref[3];
    query_input_options = {
      type: 'search',
      name: 'q',
      id: 'q',
      placeholder: "XXX",
      "class": 'field'
    };
    q = O['last-query']['q'];
    if (q != null) {
      query_input_options['value'] = q;
      page_style = 'resultspage';
    } else {
      page_style = 'frontpage';
    }
    DOCTYPE(5);
    HTML((function(_this) {
      return function() {
        HEAD(function() {
          META({
            charset: 'utf-8'
          });
          TITLE(O['title']);
          if (O['description'] != null) {
            META({
              name: 'description',
              content: O['description']
            });
          }
          LINK({
            rel: 'stylesheet',
            href: '/public/cssnormalize-min.css'
          });
          LINK({
            rel: 'stylesheet',
            href: '/public/mingkwai.css'
          });
          LINK({
            rel: 'stylesheet',
            href: '/public/font-awesome-4.0.0/css/font-awesome.css'
          });
          LINK({
            rel: 'shortcut icon',
            href: '/favicon.ico?v=4'
          });
          SCRIPT({
            src: '/public/jquery-1.10.2.min.js'
          });
          SCRIPT({
            src: '/public/github_com_carhartl_jquery-cookie/jquery.cookie.js'
          });
          SCRIPT({
            src: '/public/coffeenode-tagtool/main.js'
          });
          SCRIPT({
            src: '/public/mingkwai.js'
          });
          return COFFEESCRIPT(function() {
            var BLAIDDRWG;
            BLAIDDRWG = {};
            window.BLAIDDRWG = BLAIDDRWG;
            log = console.log.bind(console);
            BLAIDDRWG.update_result_count = function() {
              return log("BLAIDDRWG.update_result_count is not implemented");
            };
            return ($(document)).ready(function() {
              ($('.remove')).remove();
              return log('ready');
            });
          });
        });
        return BODY("." + page_style + "." + languagecode, function() {
          DIV('#language-selector', function() {
            TEXT(translate('#LANGUAGE'));

            /* TAINT use languages and codes as provided in template options */
            return UL(function() {
              LI(function() {
                return A({
                  'data-languagecode': 'en_US'
                }, 'English');
              });
              LI(function() {
                return A({
                  'data-languagecode': 'ja_JP'
                }, '日本語');
              });
              LI(function() {
                return A({
                  'data-languagecode': 'zh_CN'
                }, '普通话');
              });
              return LI(function() {
                return A({
                  'data-languagecode': 'zh_TW'
                }, '國語');
              });
            });
          });
          DIV('#opener', function() {
            A('#homelink', {
              href: '/',
              tabindex: '10000'
            }, function() {
              IMG('#typewriter-small', {
                alt: '明快打字機 MingKwai Typewriter',
                src: '/public/lin-yutangs-mingkwai-typewriter/mingkwai-color-small.png'
              });
              return IMG('#logo', {
                alt: '明快搜字機 MingKwai Type Tool',
                src: '/public/mingkwai-title.png'
              });
            });
            return DIV('#q-form-wrapper', function() {
              return FORM('#q-form', function() {
                DIV('#q-wrapper', function() {
                  INPUT(query_input_options);
                  return BUTTON('#search-button', {
                    type: 'submit',
                    alt: translate('SEARCH')
                  }, function() {
                    return I('.fa.fa-search');
                  });
                });
                return DIV('#ds-selector', function() {
                  var ds_info, dsid, gid, name, ref1, ref2;
                  DIV('.ds-item.ds-cycle', function() {
                    return BUTTON("#ds-cycle", function() {
                      I('.fa.fa-circle');
                      I('.fa.fa-adjust');
                      I('.fa.fa-circle-o', translate('SELECT ALL'));
                      return _("CYCLE SELECTION");
                    });
                  });
                  ref1 = DSREGISTRY['groupname-by-gid'];
                  for (gid in ref1) {
                    name = ref1[gid];
                    DIV('.ds-item', function() {
                      var cbx_options;
                      cbx_options = {
                        name: 'dg',
                        type: 'checkbox',
                        value: gid
                      };
                      if (O['gids'][gid]) {
                        cbx_options['checked'] = 'checked';
                      }
                      INPUT("#" + gid, cbx_options);
                      return LABEL({
                        "for": gid
                      }, function() {
                        SPAN('.ds-id.ds-gid', gid);
                        return SPAN('.ds-name.ds-groupname', translate(name));
                      });
                    });
                  }
                  ref2 = DSREGISTRY['ds-infos'];
                  for (dsid in ref2) {
                    ds_info = ref2[dsid];
                    DIV('.ds-item', function() {
                      var cbx_options, sigil;
                      name = ds_info['name'];
                      sigil = ds_info['sigil'];
                      cbx_options = {
                        name: 'ds',
                        type: 'checkbox',
                        value: dsid
                      };
                      if (O['dsids'][dsid]) {
                        cbx_options['checked'] = 'checked';
                      }
                      INPUT("#" + dsid, cbx_options);
                      return LABEL({
                        "for": dsid
                      }, function() {
                        SPAN('.ds-id.ds-dsid', dsid);
                        return SPAN('.ds-name', name);
                      });
                    });
                  }
                  return DIV('.ds-item', function() {
                    var cbx_options, sigil;
                    name = 'db';
                    sigil = 'db';
                    cbx_options = {
                      name: 'db',
                      type: 'checkbox',
                      value: 'db'
                    };
                    if (O['db']) {
                      cbx_options['checked'] = 'checked';
                    }
                    INPUT("#db", cbx_options);
                    return LABEL({
                      "for": 'db'
                    }, function() {
                      SPAN('.ds-id.ds-dsid', 'db');
                      return SPAN('.ds-name', translate('MOJIKURA DATABASE'));
                    });
                  });
                });
              });
            });
          });
          if (page_style === 'resultspage') {
            return DIV('#results-wrapper', function() {
              DIV('.results-message', function() {
                SPAN('#result-count', "0");
                return RAW(" results (" + O['dt'] + " seconds)");
              });
              return DIV('#results', function() {
                return COMMENT(O['cut-here-mark']);
              });
            });
          } else {
            DIV('#typewriter', function() {
              return A({
                "class": 'nolinkmark',
                target: '_blank',
                href: 'http://en.wikipedia.org/wiki/Chinese_typewriter'
              }, function() {
                var img_options;
                img_options = {
                  alt: translate("LINYUTANG MINGKWAI TYPEWRITER"),
                  title: translate("LINYUTANG MINGKWAI TYPEWRITER"),
                  src: '/public/lin-yutangs-mingkwai-typewriter/mingkwai-color.png',
                  width: 400
                };
                return IMG(img_options);
              });
            });
            return COMMENT(O['cut-here-mark']);
          }
        });
      };
    })(this));
    return null;
  });

  this.result_row = RENDERABLE(function(O) {
    var ds_info, ds_name, dsid, entries, entry, entry_options, finds, i, key, keys, len, line_nr, name, ref, ref1, result_nr, results, route, sub_idx, sub_value, value;
    switch (O['result-type']) {
      case 'text':
        ref = O['result'], route = ref[0], line_nr = ref[1], finds = ref[2];
        return TR('.result', (function(_this) {
          return function() {
            TD(line_nr);
            return TD(finds.join(' '));
          };
        })(this));
      case 'ds':
        ref1 = O['result'], route = ref1[0], line_nr = ref1[1], finds = ref1[2];
        result_nr = O['result-nr'];
        dsid = O['dsid'];
        ds_info = DSREGISTRY['ds-infos'][dsid];
        ds_name = ds_info['name'];
        entry_options = {
          'data-result-nr': result_nr,
          'data-dsid': dsid,
          'data-line-nr': line_nr
        };
        return DIV('.result.mix', entry_options, (function(_this) {
          return function() {
            SPAN('.field.meta-field.dsid', dsid);
            SPAN('.field.meta-field.line-nr', line_nr);
            return SPAN('.field', function() {
              var find, i, isa_match, len, results;
              isa_match = false;
              results = [];
              for (i = 0, len = finds.length; i < len; i++) {
                find = finds[i];
                if (find.length > 0) {
                  find = _this._markup_text(find);
                  if (isa_match) {
                    find = find.replace(/\t/g, "</span></span>\t<span class='field'><span class='match'>");
                    SPAN('.match', function() {
                      return RAW(find);
                    });
                  } else {
                    find = find.replace(/\t/g, "</span></span>\t<span class='field'><span>");
                    SPAN('.field', function() {
                      return RAW(find);
                    });
                  }
                }
                results.push(isa_match = !isa_match);
              }
              return results;
            });
          };
        })(this));
      case 'db':
        entries = O['result'];
        result_nr = O['result-nr'];
        dsid = O['dsid'];
        line_nr = 0;
        entry_options = {
          'data-result-nr': result_nr,
          'data-dsid': dsid,
          'data-line-nr': line_nr
        };
        results = [];
        for (i = 0, len = entries.length; i < len; i++) {
          entry = entries[i];
          keys = ((function() {
            var results1;
            results1 = [];
            for (name in entry) {
              results1.push(name);
            }
            return results1;
          })()).sort();
          results.push((function() {
            var j, len1, results1;
            results1 = [];
            for (j = 0, len1 = keys.length; j < len1; j++) {
              key = keys[j];
              if (key[0] === '_') {
                continue;
              }
              line_nr += 1;
              value = entry[key];
              if (TYPES.isa_list(value)) {
                results1.push((function() {
                  var k, len2, results2;
                  results2 = [];
                  for (sub_idx = k = 0, len2 = value.length; k < len2; sub_idx = ++k) {
                    sub_value = value[sub_idx];
                    results2.push(DIV('.result.mix', entry_options, (function(_this) {
                      return function() {
                        SPAN('.field.meta-field.result-nr', result_nr);
                        SPAN('.field.meta-field.dsid', dsid);
                        SPAN('.field.meta-field.line-nr', line_nr);
                        SPAN('.field', key + "#" + sub_idx + ":");
                        return SPAN('.field', "" + (rpr(sub_value)));
                      };
                    })(this)));
                  }
                  return results2;
                }).call(this));
              } else {
                results1.push(DIV('.result.mix', entry_options, (function(_this) {
                  return function() {
                    SPAN('.field.meta-field.result-nr', result_nr);
                    SPAN('.field.meta-field.dsid', dsid);
                    SPAN('.field.meta-field.line-nr', line_nr);
                    SPAN('.field', key + ":");
                    return SPAN('.field', "" + (rpr(value)));
                  };
                })(this)));
              }
            }
            return results1;
          }).call(this));
        }
        return results;
        break;
      default:
        return DIV('#server-error', "unknown results type: " + (rpr(O['result-type'])));
    }
  });

  this.update_result_count = RENDERABLE(function(O) {
    return SCRIPT('.remove', "BLAIDDRWG.update_result_count( " + O['result-count'] + " )");
  });

  this.refuse = RENDERABLE(function(O) {
    var _, duration, language_class, languagecode, ref, translate;
    ref = this.get_languagecode_etc(O), languagecode = ref[0], language_class = ref[1], translate = ref[2], _ = ref[3];
    duration = MOMENT.duration(O['ms-to-wait']);
    DIV(_(O['reason']));
    if (duration.asMinutes() < 1) {
      return DIV("Please try again in " + (Math.floor(duration.asSeconds() + 0.5)) + " seconds.");
    } else {
      return DIV("Please try again " + (duration.humanize(true)) + ".");
    }
  });

}).call(this);
